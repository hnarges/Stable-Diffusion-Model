import torch
import torch.nn as nn
import torch.nn.functional as F

class Encoder(nn.Module):
    def __init__(self, capacity, latent_dims):
        super(Encoder, self).__init__()
        self.conv1 = nn.Conv2d(1, capacity, kernel_size=4, stride=2, padding=1)  # c x 14 x 14
        self.conv2 = nn.Conv2d(capacity, capacity * 2, kernel_size=4, stride=2, padding=1)  # 2c x 7 x 7
        self.fc_mu = nn.Linear(capacity * 2 * 7 * 7, latent_dims)
        self.fc_logvar = nn.Linear(capacity * 2 * 7 * 7, latent_dims)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = x.view(x.size(0), -1)
        mu = self.fc_mu(x)
        logvar = self.fc_logvar(x)
        return mu, logvar

class Decoder(nn.Module):
    def __init__(self, capacity, latent_dims):
        super(Decoder, self).__init__()
        self.fc = nn.Linear(latent_dims, capacity * 2 * 7 * 7)
        self.conv2 = nn.ConvTranspose2d(capacity * 2, capacity, kernel_size=4, stride=2, padding=1)
        self.conv1 = nn.ConvTranspose2d(capacity, 1, kernel_size=4, stride=2, padding=1)

    def forward(self, x):
        x = self.fc(x)
        x = x.view(x.size(0), capacity * 2, 7, 7)
        x = F.relu(self.conv2(x))
        x = torch.sigmoid(self.conv1(x))
        return x

class VariationalAutoencoder(nn.Module):
    def __init__(self, capacity, latent_dims):
        super(VariationalAutoencoder, self).__init__()
        self.encoder = Encoder(capacity, latent_dims)
        self.decoder = Decoder(capacity, latent_dims)

    def forward(self, x):
        mu, logvar = self.encoder(x)
        z = self.reparameterize(mu, logvar)
        return self.decoder(z), mu, logvar

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return eps * std + mu
